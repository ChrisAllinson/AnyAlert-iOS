//
//  AnyAlertViewController.swift
//  AnyApp
//
//  Created by Chris Allinson on 2018-01-20.
//  Copyright (c) 2018 Chris Allinson. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit


protocol AnyAlertDelegate
{
    func popAlert(id: String, parentVcName: String)
}

protocol AnyAlertDisplayLogic: class
{
    func setStyle(viewModel: AnyAlertAction.Display.ViewModel)
    func setMessage(viewModel: AnyAlertAction.Display.ViewModel)
    func setCloseButtonVisibility(viewModel: AnyAlertAction.Display.ViewModel)
    func setStatusBarStyle(viewModel: AnyAlertAction.Display.ViewModel)
    func showAlert(viewModel: AnyAlertAction.Display.ViewModel)
    func hideAlert(viewModel: AnyAlertAction.Dismiss.ViewModel)
}


// MARK: -

class AnyAlertViewController: UIViewController
{
    // MARK: Instance variables
    
    var interactor: AnyAlertBusinessLogic?
    var dataStore: AnyAlertDataStore?
    
    var tapGestureRecognizer: UITapGestureRecognizer?
    
    @IBOutlet weak var alertContainer: UIView?
    @IBOutlet weak var topConstraint: NSLayoutConstraint?
    @IBOutlet weak var heightConstraint: NSLayoutConstraint?
    @IBOutlet weak var messageLabel: UILabel?
    @IBOutlet weak var closeButton: UIButton?
    
    
    
    // MARK: Object lifecycle
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        
        setup()
    }
    
    // MARK: Custom init methods
    
    class func `init`(delegate: AnyAlertDelegate, alert: AnyAlert, parentVcName: String, initialStatusBarStyle: UIStatusBarStyle, hasNavBar: Bool, tapHandler: (() -> Void)? = nil) -> AnyAlertViewController
    {
        let storyboard: UIStoryboard = UIStoryboard(name: "AnyAlert", bundle: Bundle(for: self.classForCoder()))
        
        let vc: AnyAlertViewController = storyboard.instantiateViewController(withIdentifier: "AnyAlertViewController") as! AnyAlertViewController
        
        vc.view.frame = CGRect(x: 0.0, y: 0.0, width: vc.view.frame.size.width, height: CGFloat(alert.height))
        
        vc.view.translatesAutoresizingMaskIntoConstraints = false
        
        
        
        vc.dataStore?.delegate = delegate
        
        let uuid: String = UUID().uuidString
        vc.dataStore?.id = uuid
        
        vc.dataStore?.message = alert.message
        
        vc.dataStore?.backgroundColor = alert.backgroundColor
        
        vc.dataStore?.messageFont = alert.messageFont
        
        vc.dataStore?.messageColor = alert.messageColor
        
        vc.dataStore?.closeButtonFont = alert.closeButtonFont
        
        vc.dataStore?.closeButtonColor = alert.closeButtonColor
        
        vc.dataStore?.parentVcName = parentVcName
        
        vc.dataStore?.initialStatusBarStyle = initialStatusBarStyle
        
        vc.dataStore?.doesSelfDismiss = alert.doesSelfDismiss
        
        vc.dataStore?.height = alert.height
        
        vc.dataStore?.statusBarStyle = alert.statusBarStyle
        
        vc.dataStore?.hasNavBar = hasNavBar
        
        vc.dataStore?.startPositionY = -1.0 * alert.height
        
        if hasNavBar {
            vc.dataStore?.endPositionY = -46.0
        } else {
            if #available(iOS 11.0, *) {
                let isPhoneX = (UIApplication.shared.keyWindow?.safeAreaInsets.top)! > CGFloat(0.0) || (UIApplication.shared.keyWindow?.safeAreaInsets)! != .zero
                vc.dataStore?.endPositionY = isPhoneX ? -10.0 : -26.0
            } else {
                vc.dataStore?.endPositionY = -26.0
            }
        }
        
        vc.dataStore?.openSpeed = alert.openSpeed
        
        vc.dataStore?.closeSpeed = alert.closeSpeed
        
        vc.dataStore?.showFor = alert.showFor
        
        vc.dataStore?.tapHandler = tapHandler
        
        
        
        return vc
    }
    
    // MARK: View lifecycle
    
    override func viewWillAppear(_ animated: Bool)
    {
        resetTopConstraint()
        setTapGestureRecognizer()
    }
    
    override func viewDidAppear(_ animated: Bool)
    {
        displayAlert()
    }
    
    override func viewWillDisappear(_ animated: Bool)
    {
        dismissAlert(immediately: true)
    }
    
    
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController: AnyAlertViewController = self
        let interactor: AnyAlertInteractor = AnyAlertInteractor()
        let presenter: AnyAlertPresenter = AnyAlertPresenter()
        viewController.interactor = interactor
        viewController.dataStore = interactor
        interactor.presenter = presenter
        presenter.viewController = viewController
    }
    
    
    
    // MARK: UI Events
    
    @IBAction func closePressed()
    {
        dismissAlert()
    }
    
    
    
    // MARK: Gesture handlers
    
    @objc func alertTapped()
    {
        dataStore?.tapHandler!()
    }
    
    
    
    // MARK: Private methods
    
    private func resetTopConstraint()
    {
        self.topConstraint?.constant = CGFloat( (dataStore?.startPositionY)! )
        self.view.layoutIfNeeded()
    }
    
    private func setTapGestureRecognizer()
    {
        guard dataStore?.tapHandler != nil else {
            return
        }
        
        tapGestureRecognizer = UITapGestureRecognizer(target: self, action: #selector(alertTapped))
        self.messageLabel?.addGestureRecognizer(tapGestureRecognizer!)
        self.messageLabel?.isUserInteractionEnabled = true
    }
    
    private func displayAlert()
    {
        let request: AnyAlertAction.Display.Request = AnyAlertAction.Display.Request(
            delegate: (dataStore?.delegate)!,
            id: (dataStore?.id)!,
            message: (dataStore?.message)!,
            backgroundColor: (dataStore?.backgroundColor)!,
            statusBarStyle: (dataStore?.statusBarStyle)!,
            messageFont: (dataStore?.messageFont)!,
            messageColor: (dataStore?.messageColor)!,
            closeButtonFont: (dataStore?.closeButtonFont)!,
            closeButtonColor: (dataStore?.closeButtonColor)!,
            openSpeed: (dataStore?.openSpeed)!,
            closeSpeed: (dataStore?.closeSpeed)!,
            doesSelfDismiss: (dataStore?.doesSelfDismiss)!,
            showFor: (dataStore?.showFor)!,
            hasNavBar: (dataStore?.hasNavBar)!,
            parentVcName: (dataStore?.parentVcName)!,
            initialStatusBarStyle: (dataStore?.initialStatusBarStyle)!,
            startPositionY: (dataStore?.startPositionY)!,
            endPositionY: (dataStore?.endPositionY)!
        )
        interactor?.displayAlert(request: request)
    }
    
    private func dismissAlert(immediately: Bool? = false)
    {
        let tempRequest: AnyAlertAction.Dismiss.Request = AnyAlertAction.Dismiss.Request(
            delegate: (dataStore?.delegate)!,
            id: (dataStore?.id)!,
            closeSpeed: (dataStore?.closeSpeed)!,
            hasNavBar: (dataStore?.hasNavBar)!,
            parentVcName: (dataStore?.parentVcName)!,
            initialStatusBarStyle: (dataStore?.initialStatusBarStyle)!,
            startPositionY: (dataStore?.startPositionY)!,
            immediately: immediately!
        )
        interactor?.dismissAlert(request: tempRequest)
    }
}


// MARK: -

extension AnyAlertViewController: AnyAlertDisplayLogic
{
    // MARK: AnyAlertDisplayLogic
    
    func setStyle(viewModel: AnyAlertAction.Display.ViewModel)
    {
        alertContainer?.backgroundColor = viewModel.backgroundColor
        messageLabel?.font = viewModel.messageFont
        messageLabel?.textColor = viewModel.messageColor
        closeButton?.titleLabel?.font = viewModel.closeButtonFont
        closeButton?.setTitleColor(viewModel.closeButtonColor, for: .normal)
    }
    
    func setMessage(viewModel: AnyAlertAction.Display.ViewModel)
    {
        messageLabel?.text = viewModel.message
    }
    
    func setCloseButtonVisibility(viewModel: AnyAlertAction.Display.ViewModel)
    {
        closeButton?.isHidden = viewModel.shouldHideCloseButton
    }
    
    func setStatusBarStyle(viewModel: AnyAlertAction.Display.ViewModel)
    {
        UIApplication.shared.statusBarStyle = viewModel.statusBarStyle
    }
    
    func showAlert(viewModel: AnyAlertAction.Display.ViewModel)
    {
        self.topConstraint?.constant = CGFloat(viewModel.endPositionY)
        
        UIView.animate(withDuration: viewModel.openSpeed) {
            self.view.layoutIfNeeded()
        }
    }
    
    func hideAlert(viewModel: AnyAlertAction.Dismiss.ViewModel)
    {
        self.view.isUserInteractionEnabled = false
        
        self.topConstraint?.constant = CGFloat(viewModel.startPositionY)
        
        if viewModel.immediately! {
            self.view.layoutIfNeeded()
        } else {
            UIView.animate(withDuration: viewModel.closeSpeed) {
                self.view.layoutIfNeeded()
            }
        }
    }
}
